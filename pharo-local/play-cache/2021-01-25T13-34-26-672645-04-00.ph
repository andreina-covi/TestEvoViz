| typeInfo block regex tCFactory |block := [ | atm customer bank accounts |	bank := TEVBank new.	bank data: (Dictionary new 		at: (TEVCustomer new name: 'Peter'; id: 'peter987') 		put: (TEVAccount new pin: 5001; balance: 0 );			at: (TEVCustomer new name: 'Mary'; id: 'mary456') 		put: (TEVAccount new pin: 7004; balance: 400 );		yourself).	bank addNewCustomer: 	(TEVCustomer new name: 'Josh'; id: 'josh123') 		and: (TEVAccount new pin: 6000; balance: 2000 ).	atm := TEVATM new: bank.	customer := TEVCustomer new id: 'josh123'.	[ atm start: customer givenPIN: 7546] on: Error do: [ ].	[ atm start: customer givenPIN: 9343 ] on: Error do: [ ].	atm 		start: customer givenPIN: 6000;		getBalanceInquiry;		withdraw: 200;		getBalanceInquiry;		deposit: 50;		getBalanceInquiry ] .regex := 'TEV*'.typeInfo := STypeInfo asTypeInfo: (        SSTypeCollector profile: block onPackagesMatching: regex)."then, we use the type information to generate tests. Configure the hyperparameter values which are marked as 'hyperparameter'"tCFactory := STestCaseFactoryPharo new    targetClassName: #TEVATM;	typeInfo: typeInfo;    targetPackageRegex: regex;    outputPackageName: 'Generated';    numberOfGenerations: 5;  "hyperparameter, numberOfGenerations > 1 and integer"    numberOfStatements: 10;  "hyperparameter, numberOfStatements > 1 and integer"    populationSize: 10;		  "hyperparameter, populationSize > 1 and integer"	 mutationRate: 1/3;		  "hyperparameter, 0 < mutationRate <= 1"    seed: 1000;				  "hyperparameter, seed > 0 and integer"    seedBlock: block;	 selectionStrategy: SGATournamentSelection; "hyperparameter, possible values: SGARandomSelection, SGARankSelection, SGARouletteSelection, SGATournamentSelection, SGATruncatedSelection"	 generateViews;    createTestCases;    yourself.tCFactory inspect